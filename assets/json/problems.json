{
  "data": [
    {
      "acceptanceRate": 52.4,
      "accepted": 12.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/12345",
        "username": "ExperiencedCoder"
      },
      "body": "Given an array of integers and a target value, determine if there are two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/9876",
        "username": "LC_Solutions"
      },
      "editorialBody": "Solutions include a brute force approach, using a hash table for efficient lookups, or sorting with two pointers.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 5,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 1,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 2,
          "title": "3 Sum"
        }
      ],
      "submissions": 24.6,
      "testSuite": [
        {
          "input": [[2, 7, 11, 15], 9],
          "output": [0, 1]
        },
        {
          "input": [[3, 2, 4], 6],
          "output": [1, 2]
        },
        {
          "input": [[3, 3], 6],
          "output": [0, 1]
        }
      ],
      "title": "Two Sum",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Hash Table"
        }
      ]
    },
    {
      "acceptanceRate": 52.4,
      "accepted": 12.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/12345",
        "username": "ExperiencedCoder"
      },
      "body": "Given an array of integers and a target value, determine if there are two numbers that add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/9876",
        "username": "LC_Solutions"
      },
      "editorialBody": "Solutions include a brute force approach, using a hash table for efficient lookups, or sorting with two pointers.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 5,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 1,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 2,
          "title": "3 Sum"
        }
      ],
      "submissions": 24.6,
      "testSuite": [
        {
          "input": [[2, 7, 11, 15], 9],
          "output": [0, 1]
        },
        {
          "input": [[3, 2, 4], 6],
          "output": [1, 2]
        },
        {
          "input": [[3, 3], 6],
          "output": [0, 1]
        }
      ],
      "title": "Two Sum",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Hash Table"
        }
      ]
    },
    {
      "acceptanceRate": 39.2,
      "accepted": 17.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/67890",
        "username": "MathWizard"
      },
      "body": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "LinkedListGuru"
      },
      "editorialBody": "The problem can be solved by traversing both linked lists simultaneously and performing addition while considering carry. Ensure to handle edge cases such as different list lengths and final carry.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 7,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 2,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 445,
          "title": "Add Two Numbers II"
        },
        {
          "difficulty": "Easy",
          "id": 1,
          "title": "Two Sum"
        }
      ],
      "submissions": 21.7,
      "testSuite": [
        {
          "input": [
            [2, 4, 3],
            [5, 6, 4]
          ],
          "output": [7, 0, 8]
        },
        {
          "input": [[0], [0]],
          "output": [0]
        },
        {
          "input": [
            [9, 9, 9, 9, 9, 9, 9],
            [9, 9, 9, 9]
          ],
          "output": [8, 9, 9, 9, 0, 0, 0, 1]
        }
      ],
      "title": "Add Two Numbers",
      "topics": [
        {
          "name": "Linked List"
        },
        {
          "name": "Math"
        }
      ]
    },
    {
      "acceptanceRate": 30.1,
      "accepted": 14.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/24680",
        "username": "SubstringMaster"
      },
      "body": "Given a string s, find the length of the longest substring without repeating characters.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "StringGenius"
      },
      "editorialBody": "This problem can be solved using a sliding window approach. Keep track of the characters seen so far in a set or map while sliding the window.",
      "editorialRating": 4.8,
      "editorialVotes": {
        "1": 8,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 3,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 76,
          "title": "Minimum Window Substring"
        },
        {
          "difficulty": "Medium",
          "id": 438,
          "title": "Find All Anagrams in a String"
        }
      ],
      "submissions": 26.4,
      "testSuite": [
        {
          "input": ["abcabcbb"],
          "output": 3
        },
        {
          "input": ["bbbbb"],
          "output": 1
        },
        {
          "input": ["pwwkew"],
          "output": 3
        }
      ],
      "title": "Longest Substring Without Repeating Characters",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Sliding Window"
        },
        {
          "name": "Hash Table"
        }
      ]
    },
    {
      "acceptanceRate": 31.6,
      "accepted": 15.3,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/13579",
        "username": "MedianFinder"
      },
      "body": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "SortedArrayMaster"
      },
      "editorialBody": "The problem can be solved using binary search to partition the arrays into two parts such that elements on the left are smaller than elements on the right. Then, calculate the median based on the partitioned arrays.",
      "editorialRating": 4.9,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 4,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 719,
          "title": "Find K-th Smallest Pair Distance"
        },
        {
          "difficulty": "Hard",
          "id": 295,
          "title": "Find Median from Data Stream"
        }
      ],
      "submissions": 27.8,
      "testSuite": [
        {
          "input": [[1, 3], [2]],
          "output": 2
        },
        {
          "input": [
            [1, 2],
            [3, 4]
          ],
          "output": 2.5
        },
        {
          "input": [
            [0, 0],
            [0, 0]
          ],
          "output": 0
        }
      ],
      "title": "Median of Two Sorted Arrays",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Binary Search"
        },
        {
          "name": "Divide and Conquer"
        }
      ]
    },
    {
      "acceptanceRate": 28.5,
      "accepted": 12.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/97531",
        "username": "PalindromeExpert"
      },
      "body": "Given a string s, return the longest palindromic substring in s.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PalindromeMaster"
      },
      "editorialBody": "The problem can be solved using dynamic programming. Iterate over the string and keep track of the longest palindromic substring found so far.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 5,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 647,
          "title": "Palindromic Substrings"
        },
        {
          "difficulty": "Medium",
          "id": 516,
          "title": "Longest Palindromic Subsequence"
        }
      ],
      "submissions": 23.9,
      "testSuite": [
        {
          "input": ["babad"],
          "output": "bab"
        },
        {
          "input": ["cbbd"],
          "output": "bb"
        },
        {
          "input": ["a"],
          "output": "a"
        }
      ],
      "title": "Longest Palindromic Substring",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Dynamic Programming"
        }
      ]
    },
    {
      "acceptanceRate": 36.2,
      "accepted": 16.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/24680",
        "username": "ZigZagMaster"
      },
      "body": "The string 'PAYPALISHIRING' is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\n\nP   A   H   N\nA P L S I I G\nY   I   R",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PatternGenius"
      },
      "editorialBody": "The problem can be solved by simulating the zigzag pattern and mapping characters to their corresponding positions in the pattern.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 6,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 8,
          "title": "String to Integer (atoi)"
        },
        {
          "difficulty": "Medium",
          "id": 38,
          "title": "Count and Say"
        }
      ],
      "submissions": 20.4,
      "testSuite": [
        {
          "input": ["PAYPALISHIRING", 3],
          "output": "PAHNAPLSIIGYIR"
        },
        {
          "input": ["PAYPALISHIRING", 4],
          "output": "PINALSIGYAHRPI"
        },
        {
          "input": ["A", 1],
          "output": "A"
        }
      ],
      "title": "ZigZag Conversion",
      "topics": [
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 26.1,
      "accepted": 19.7,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/97531",
        "username": "IntegerReverser"
      },
      "body": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ReverseMaster"
      },
      "editorialBody": "The problem can be solved by using modulo and division to reverse the digits of the integer. Ensure to handle overflow and underflow cases.",
      "editorialRating": 4.8,
      "editorialVotes": {
        "1": 8,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 7,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 9,
          "title": "Palindrome Number"
        },
        {
          "difficulty": "Easy",
          "id": 13,
          "title": "Roman to Integer"
        }
      ],
      "submissions": 24.6,
      "testSuite": [
        {
          "input": [123],
          "output": 321
        },
        {
          "input": [-123],
          "output": -321
        },
        {
          "input": [120],
          "output": 21
        }
      ],
      "title": "Reverse Integer",
      "topics": [
        {
          "name": "Math"
        }
      ]
    },
    {
      "acceptanceRate": 15.8,
      "accepted": 21.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/13579",
        "username": "AtoiMaster"
      },
      "body": "Implement the 'myAtoi(string s)' function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "AtoiExpert"
      },
      "editorialBody": "The problem can be solved by implementing a state machine to handle different cases such as whitespace, sign, and overflow.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 8,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 6,
          "title": "ZigZag Conversion"
        },
        {
          "difficulty": "Medium",
          "id": 10,
          "title": "Regular Expression Matching"
        }
      ],
      "submissions": 22.3,
      "testSuite": [
        {
          "input": ["42"],
          "output": 42
        },
        {
          "input": ["   -42"],
          "output": -42
        },
        {
          "input": ["4193 with words"],
          "output": 4193
        }
      ],
      "title": "String to Integer (atoi)",
      "topics": [
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 39.1,
      "accepted": 28.4,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/67890",
        "username": "PalindromeChecker"
      },
      "body": "Given an integer x, return true if x is a palindrome. An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PalindromeExpert"
      },
      "editorialBody": "The problem can be solved by converting the integer to a string and checking if the string is equal to its reverse. Alternatively, you can reverse the integer and compare it to the original.",
      "editorialRating": 4.9,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 9,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 7,
          "title": "Reverse Integer"
        },
        {
          "difficulty": "Easy",
          "id": 13,
          "title": "Roman to Integer"
        }
      ],
      "submissions": 26.2,
      "testSuite": [
        {
          "input": [121],
          "output": true
        },
        {
          "input": [-121],
          "output": false
        },
        {
          "input": [10],
          "output": false
        }
      ],
      "title": "Palindrome Number",
      "topics": [
        {
          "name": "Math"
        }
      ]
    },
    {
      "acceptanceRate": 26.1,
      "accepted": 17.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/24680",
        "username": "RegexMaster"
      },
      "body": "Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: \n\n'.' Matches any single character.\n'*' Matches zero or more of the preceding element.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "RegexGuru"
      },
      "editorialBody": "The problem can be solved using dynamic programming. Construct a 2D table to represent matches between different substrings of the input string and the pattern.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 10,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 44,
          "title": "Wildcard Matching"
        },
        {
          "difficulty": "Hard",
          "id": 44,
          "title": "Regular Expression Matching"
        }
      ],
      "submissions": 23.7,
      "testSuite": [
        {
          "input": ["aa", "a"],
          "output": false
        },
        {
          "input": ["aa", "a*"],
          "output": true
        },
        {
          "input": ["ab", ".*"],
          "output": true
        }
      ],
      "title": "Regular Expression Matching",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Dynamic Programming"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 50.3,
      "accepted": 32.1,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/75321",
        "username": "WaterContainerMaster"
      },
      "body": "Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ContainerExpert"
      },
      "editorialBody": "The problem can be solved using a two-pointer approach. Start with two pointers at the beginning and end of the array, and move them towards each other while updating the maximum area.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 11,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 42,
          "title": "Trapping Rain Water"
        },
        {
          "difficulty": "Medium",
          "id": 42,
          "title": "Container With Most Water"
        }
      ],
      "submissions": 27.8,
      "testSuite": [
        {
          "input": [[1, 8, 6, 2, 5, 4, 8, 3, 7]],
          "output": 49
        },
        {
          "input": [[1, 1]],
          "output": 1
        },
        {
          "input": [[4, 3, 2, 1, 4]],
          "output": 16
        }
      ],
      "title": "Container With Most Water",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 56.8,
      "accepted": 27.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/75321",
        "username": "RomanMaster"
      },
      "body": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "RomanExpert"
      },
      "editorialBody": "The problem can be solved by iterating through the integer and converting each digit to its corresponding Roman numeral representation.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 12,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 13,
          "title": "Roman to Integer"
        },
        {
          "difficulty": "Medium",
          "id": 273,
          "title": "Integer to English Words"
        }
      ],
      "submissions": 23.4,
      "testSuite": [
        {
          "input": [3],
          "output": "III"
        },
        {
          "input": [4],
          "output": "IV"
        },
        {
          "input": [9],
          "output": "IX"
        }
      ],
      "title": "Integer to Roman",
      "topics": [
        {
          "name": "Math"
        },
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 55,
      "accepted": 28.3,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/75321",
        "username": "IntegerFromRomanMaster"
      },
      "body": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "RomanToIntExpert"
      },
      "editorialBody": "The problem can be solved by iterating through the Roman numeral string and converting each symbol to its corresponding integer value. Handle special cases like subtractive notation.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 13,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 12,
          "title": "Integer to Roman"
        },
        {
          "difficulty": "Medium",
          "id": 273,
          "title": "Integer to English Words"
        }
      ],
      "submissions": 24.9,
      "testSuite": [
        {
          "input": ["III"],
          "output": 3
        },
        {
          "input": ["IV"],
          "output": 4
        },
        {
          "input": ["IX"],
          "output": 9
        }
      ],
      "title": "Roman to Integer",
      "topics": [
        {
          "name": "Math"
        },
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 36.6,
      "accepted": 31.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/24680",
        "username": "PrefixMaster"
      },
      "body": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string \"\".",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PrefixExpert"
      },
      "editorialBody": "The problem can be solved by iterating through the characters of the first string and comparing them with corresponding characters of other strings.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 5,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 14,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 28,
          "title": "Implement strStr()"
        },
        {
          "difficulty": "Medium",
          "id": 28,
          "title": "Longest Substring Without Repeating Characters"
        }
      ],
      "submissions": 28.1,
      "testSuite": [
        {
          "input": [["flower", "flow", "flight"]],
          "output": "fl"
        },
        {
          "input": [["dog", "racecar", "car"]],
          "output": ""
        },
        {
          "input": [["cir", "car"]],
          "output": "c"
        }
      ],
      "title": "Longest Common Prefix",
      "topics": [
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 28.6,
      "accepted": 20.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "ThreeSumMaster"
      },
      "body": "Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Notice that the solution set must not contain duplicate triplets.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ThreeSumExpert"
      },
      "editorialBody": "The problem can be solved by sorting the array and using a two-pointer approach to find triplets that sum up to zero. Handle duplicate triplets by skipping duplicates in the array.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 15,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 1,
          "title": "Two Sum"
        },
        {
          "difficulty": "Medium",
          "id": 11,
          "title": "Container With Most Water"
        }
      ],
      "submissions": 25.3,
      "testSuite": [
        {
          "input": [[-1, 0, 1, 2, -1, -4]],
          "output": [
            [-1, -1, 2],
            [-1, 0, 1]
          ]
        },
        {
          "input": [[]],
          "output": []
        },
        {
          "input": [[0]],
          "output": []
        }
      ],
      "title": "3Sum",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 33.7,
      "accepted": 24.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "ClosestThreeSumMaster"
      },
      "body": "Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ClosestThreeSumExpert"
      },
      "editorialBody": "The problem can be solved by sorting the array and using a two-pointer approach to find the closest triplet sum to the target.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 5,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 16,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 1,
          "title": "Two Sum"
        },
        {
          "difficulty": "Medium",
          "id": 15,
          "title": "3Sum"
        }
      ],
      "submissions": 26.7,
      "testSuite": [
        {
          "input": [[-1, 2, 1, -4], 1],
          "output": 2
        },
        {
          "input": [[0, 0, 0], 1],
          "output": 0
        },
        {
          "input": [[1, 1, 1, 0], -100],
          "output": 2
        }
      ],
      "title": "3Sum Closest",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 48.7,
      "accepted": 34.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "PhoneLetterMaster"
      },
      "body": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PhoneLetterExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Iterate through the digits of the phone number and append corresponding letters from a mapping for each digit.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 17,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 39,
          "title": "Combination Sum"
        },
        {
          "difficulty": "Medium",
          "id": 46,
          "title": "Permutations"
        }
      ],
      "submissions": 25.2,
      "testSuite": [
        {
          "input": ["23"],
          "output": ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
        },
        {
          "input": ["2"],
          "output": ["a", "b", "c"]
        },
        {
          "input": [""],
          "output": []
        }
      ],
      "title": "Letter Combinations of a Phone Number",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 31.2,
      "accepted": 23.4,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "FourSumMaster"
      },
      "body": "Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target. Notice that the solution set must not contain duplicate quadruplets.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "FourSumExpert"
      },
      "editorialBody": "The problem can be solved by sorting the array and using a combination of two-pointer approach and recursion to find unique quadruplets that sum up to the target.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 5,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 18,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 1,
          "title": "Two Sum"
        },
        {
          "difficulty": "Medium",
          "id": 15,
          "title": "3Sum"
        }
      ],
      "submissions": 27.8,
      "testSuite": [
        {
          "input": [[1, 0, -1, 0, -2, 2], 0],
          "output": [
            [-2, -1, 1, 2],
            [-2, 0, 0, 2],
            [-1, 0, 0, 1]
          ]
        },
        {
          "input": [[2, 2, 2, 2, 2], 8],
          "output": [[2, 2, 2, 2]]
        },
        {
          "input": [[], 0],
          "output": []
        }
      ],
      "title": "4Sum",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 38.6,
      "accepted": 32.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "NthNodeMaster"
      },
      "body": "Given the head of a linked list, remove the nth node from the end of the list and return its head.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "NthNodeExpert"
      },
      "editorialBody": "The problem can be solved using two pointers. Maintain two pointers that start from the head and move one pointer to the nth node from the beginning. Then move both pointers until the first pointer reaches the end of the list. At this point, the second pointer will be at the nth node from the end, and we can remove it from the list.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 19,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 83,
          "title": "Remove Duplicates from Sorted List"
        },
        {
          "difficulty": "Medium",
          "id": 21,
          "title": "Merge Two Sorted Lists"
        }
      ],
      "submissions": 26.5,
      "testSuite": [
        {
          "input": [[1, 2, 3, 4, 5], 2],
          "output": [1, 2, 3, 5]
        },
        {
          "input": [[1], 1],
          "output": []
        },
        {
          "input": [[1, 2], 1],
          "output": [1]
        }
      ],
      "title": "Remove Nth Node From End of List",
      "topics": [
        {
          "name": "Linked List"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 41.9,
      "accepted": 34.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "ParenthesesMaster"
      },
      "body": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid. An input string is valid if: - Open brackets must be closed by the same type of brackets. - Open brackets must be closed in the correct order.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ParenthesesExpert"
      },
      "editorialBody": "The problem can be solved using a stack data structure. Iterate through the characters of the string, pushing opening brackets onto the stack and popping them when encountering their corresponding closing brackets. If the stack is empty after iterating through all characters, the string is valid.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 20,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 739,
          "title": "Daily Temperatures"
        },
        {
          "difficulty": "Medium",
          "id": 946,
          "title": "Validate Stack Sequences"
        }
      ],
      "submissions": 25.7,
      "testSuite": [
        {
          "input": ["()"],
          "output": true
        },
        {
          "input": ["()[]{}"],
          "output": true
        },
        {
          "input": ["(]"],
          "output": false
        }
      ],
      "title": "Valid Parentheses",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Stack"
        }
      ]
    },
    {
      "acceptanceRate": 53.9,
      "accepted": 46.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "MergeListMaster"
      },
      "body": "Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "MergeListExpert"
      },
      "editorialBody": "The problem can be solved iteratively or recursively. In both approaches, maintain a pointer to the merged list and move it to the next smallest node among the two input lists.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 21,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 23,
          "title": "Merge k Sorted Lists"
        },
        {
          "difficulty": "Easy",
          "id": 23,
          "title": "Merge Sorted Array"
        }
      ],
      "submissions": 27.3,
      "testSuite": [
        {
          "input": [
            [1, 2, 4],
            [1, 3, 4]
          ],
          "output": [1, 1, 2, 3, 4, 4]
        },
        {
          "input": [[], []],
          "output": []
        },
        {
          "input": [[], [0]],
          "output": [0]
        }
      ],
      "title": "Merge Two Sorted Lists",
      "topics": [
        {
          "name": "Linked List"
        }
      ]
    },
    {
      "acceptanceRate": 68.9,
      "accepted": 57.4,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "GenerateParenthesesMaster"
      },
      "body": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "GenerateParenthesesExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Generate all possible combinations of parentheses and backtrack to prune invalid combinations.",
      "editorialRating": 4.8,
      "editorialVotes": {
        "1": 8,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 22,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 17,
          "title": "Letter Combinations of a Phone Number"
        },
        {
          "difficulty": "Medium",
          "id": 93,
          "title": "Restore IP Addresses"
        }
      ],
      "submissions": 29.6,
      "testSuite": [
        {
          "input": [3],
          "output": ["((()))", "(()())", "(())()", "()(())", "()()()"]
        },
        {
          "input": [1],
          "output": ["()"]
        },
        {
          "input": [2],
          "output": ["(())", "()()"]
        }
      ],
      "title": "Generate Parentheses",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 39.5,
      "accepted": 32.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "MergeKListMaster"
      },
      "body": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "MergeKListExpert"
      },
      "editorialBody": "The problem can be solved using a priority queue. Maintain a priority queue to store the head nodes of all linked lists and repeatedly extract the smallest node from the priority queue and add its next node to the queue until all lists are exhausted.",
      "editorialRating": 4.9,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 23,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 84,
          "title": "Largest Rectangle in Histogram"
        },
        {
          "difficulty": "Hard",
          "id": 147,
          "title": "Insertion Sort List"
        }
      ],
      "submissions": 26.1,
      "testSuite": [
        {
          "input": [
            [
              [1, 4, 5],
              [1, 3, 4],
              [2, 6]
            ]
          ],
          "output": [1, 1, 2, 3, 4, 4, 5, 6]
        },
        {
          "input": [[]],
          "output": []
        },
        {
          "input": [[[1]]],
          "output": [1]
        }
      ],
      "title": "Merge k Sorted Lists",
      "topics": [
        {
          "name": "Linked List"
        },
        {
          "name": "Divide and Conquer"
        },
        {
          "name": "Heap"
        }
      ]
    },
    {
      "acceptanceRate": 53.8,
      "accepted": 45.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "SwapNodesMaster"
      },
      "body": "Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "SwapNodesExpert"
      },
      "editorialBody": "The problem can be solved iteratively or recursively. In both approaches, maintain pointers to the previous, current, and next nodes to perform the swap operation. Update the pointers accordingly while iterating through the list.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 24,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 206,
          "title": "Reverse Linked List"
        },
        {
          "difficulty": "Hard",
          "id": 25,
          "title": "Reverse Nodes in k-Group"
        }
      ],
      "submissions": 29.2,
      "testSuite": [
        {
          "input": [[1, 2, 3, 4]],
          "output": [2, 1, 4, 3]
        },
        {
          "input": [[1, 2, 3, 4, 5]],
          "output": [2, 1, 4, 3, 5]
        },
        {
          "input": [[1]],
          "output": [1]
        }
      ],
      "title": "Swap Nodes in Pairs",
      "topics": [
        {
          "name": "Linked List"
        }
      ]
    },
    {
      "acceptanceRate": 43.6,
      "accepted": 38.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "ReverseKGroupMaster"
      },
      "body": "Given a linked list, reverse the nodes of a linked list k at a time and return its modified list. k is a positive integer that is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k, then the remaining nodes should remain as it is.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ReverseKGroupExpert"
      },
      "editorialBody": "The problem can be solved using a recursive approach with a helper function to reverse a sub-list of size k. Reverse each group of k nodes and connect the reversed groups together.",
      "editorialRating": 4.9,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 25,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 92,
          "title": "Reverse Linked List II"
        },
        {
          "difficulty": "Hard",
          "id": 24,
          "title": "Swap Nodes in Pairs"
        }
      ],
      "submissions": 28.4,
      "testSuite": [
        {
          "input": [[1, 2, 3, 4, 5], 2],
          "output": [2, 1, 4, 3, 5]
        },
        {
          "input": [[1, 2, 3, 4, 5], 3],
          "output": [3, 2, 1, 4, 5]
        },
        {
          "input": [[1], 1],
          "output": [1]
        }
      ],
      "title": "Reverse Nodes in k-Group",
      "topics": [
        {
          "name": "Linked List"
        }
      ]
    },
    {
      "acceptanceRate": 46.6,
      "accepted": 39.4,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "RemoveDuplicatesMaster"
      },
      "body": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "RemoveDuplicatesExpert"
      },
      "editorialBody": "The problem can be solved using two pointers. Initialize two pointers at the beginning of the array. Iterate through the array, moving the second pointer when encountering a non-duplicate element. Move the first pointer to the next non-duplicate element and replace it with the current element.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 5,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 26,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 27,
          "title": "Remove Element"
        },
        {
          "difficulty": "Medium",
          "id": 80,
          "title": "Remove Duplicates from Sorted Array II"
        }
      ],
      "submissions": 27.9,
      "testSuite": [
        {
          "input": [[1, 1, 2]],
          "output": [1, 2]
        },
        {
          "input": [[0, 0, 1, 1, 1, 2, 2, 3, 3, 4]],
          "output": [0, 1, 2, 3, 4]
        },
        {
          "input": [[1]],
          "output": [1]
        }
      ],
      "title": "Remove Duplicates from Sorted Array",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 45.7,
      "accepted": 37.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "RemoveElementMaster"
      },
      "body": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "RemoveElementExpert"
      },
      "editorialBody": "The problem can be solved using two pointers. Initialize two pointers at the beginning and end of the array. Iterate through the array, moving the second pointer when encountering the value to remove. Replace the value at the first pointer with the value at the second pointer.",
      "editorialRating": 4.4,
      "editorialVotes": {
        "1": 6,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 27,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 26,
          "title": "Remove Duplicates from Sorted Array"
        },
        {
          "difficulty": "Easy",
          "id": 203,
          "title": "Remove Linked List Elements"
        }
      ],
      "submissions": 27.3,
      "testSuite": [
        {
          "input": [[3, 2, 2, 3], 3],
          "output": [2, 2]
        },
        {
          "input": [[0, 1, 2, 2, 3, 0, 4, 2], 2],
          "output": [0, 1, 4, 0, 3]
        },
        {
          "input": [[1], 1],
          "output": []
        }
      ],
      "title": "Remove Element",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 33.9,
      "accepted": 30.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "StrStrMaster"
      },
      "body": "Implement strStr(). Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "StrStrExpert"
      },
      "editorialBody": "The problem can be solved using the sliding window technique. Iterate through the haystack, checking if the substring starting at each index matches the needle. Return the index if found.",
      "editorialRating": 4.2,
      "editorialVotes": {
        "1": 4,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 28,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 459,
          "title": "Repeated Substring Pattern"
        },
        {
          "difficulty": "Easy",
          "id": 14,
          "title": "Longest Common Prefix"
        }
      ],
      "submissions": 25.6,
      "testSuite": [
        {
          "input": ["hello", "ll"],
          "output": 2
        },
        {
          "input": ["aaaaa", "bba"],
          "output": -1
        },
        {
          "input": ["", ""],
          "output": 0
        }
      ],
      "title": "Implement strStr()",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 17.2,
      "accepted": 13.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "DivideIntegersMaster"
      },
      "body": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator. Return the quotient after dividing dividend by divisor. The integer division should truncate toward zero, which means losing its fractional part.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "DivideIntegersExpert"
      },
      "editorialBody": "The problem can be solved using bit manipulation. Divide the dividend and divisor using bit shifting operations to simulate division. Handle edge cases such as overflow and divisor being 0.",
      "editorialRating": 4.8,
      "editorialVotes": {
        "1": 8,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 29,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 50,
          "title": "Pow(x, n)"
        },
        {
          "difficulty": "Hard",
          "id": 69,
          "title": "Sqrt(x)"
        }
      ],
      "submissions": 24.8,
      "testSuite": [
        {
          "input": [10, 3],
          "output": 3
        },
        {
          "input": [7, -3],
          "output": -2
        },
        {
          "input": [0, 1],
          "output": 0
        }
      ],
      "title": "Divide Two Integers",
      "topics": [
        {
          "name": "Math"
        },
        {
          "name": "Bit Manipulation"
        }
      ]
    },
    {
      "acceptanceRate": 26.6,
      "accepted": 22.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "ConcatenationSubstringMaster"
      },
      "body": "You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ConcatenationSubstringExpert"
      },
      "editorialBody": "The problem can be solved using a sliding window approach. Use a hashmap to store the occurrences of words in the words array. Slide a window of length equal to the total length of all words concatenated together, checking if the substring matches the concatenated words.",
      "editorialRating": 4.9,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 30,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 76,
          "title": "Minimum Window Substring"
        },
        {
          "difficulty": "Hard",
          "id": 159,
          "title": "Longest Substring with At Most Two Distinct Characters"
        }
      ],
      "submissions": 24.1,
      "testSuite": [
        {
          "input": ["barfoothefoobarman", ["foo", "bar"]],
          "output": [0, 9]
        },
        {
          "input": [
            "wordgoodgoodgoodbestword",
            ["word", "good", "best", "word"]
          ],
          "output": []
        },
        {
          "input": ["barfoofoobarthefoobarman", ["bar", "foo", "the"]],
          "output": [6, 9, 12]
        }
      ],
      "title": "Substring with Concatenation of All Words",
      "topics": [
        {
          "name": "Hash Table"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 34.7,
      "accepted": 29.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "NextPermutationMaster"
      },
      "body": "Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "NextPermutationExpert"
      },
      "editorialBody": "The problem can be solved by finding the first decreasing element from the right and swapping it with the smallest element greater than it from the right. Then, reverse the elements from the next element of the swapped element to the end.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 31,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 46,
          "title": "Permutations"
        },
        {
          "difficulty": "Hard",
          "id": 47,
          "title": "Permutations II"
        }
      ],
      "submissions": 26.3,
      "testSuite": [
        {
          "input": [[1, 2, 3]],
          "output": [1, 3, 2]
        },
        {
          "input": [[3, 2, 1]],
          "output": [1, 2, 3]
        },
        {
          "input": [[1, 1, 5]],
          "output": [1, 5, 1]
        }
      ],
      "title": "Next Permutation",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        }
      ]
    },
    {
      "acceptanceRate": 29.6,
      "accepted": 24.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "LongestValidParenthesesMaster"
      },
      "body": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "LongestValidParenthesesExpert"
      },
      "editorialBody": "The problem can be solved using dynamic programming. Use a dp array to store the longest valid parentheses ending at each index. Iterate through the string, updating the dp array based on the current character and previous valid parentheses.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 8,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 32,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 20,
          "title": "Valid Parentheses"
        },
        {
          "difficulty": "Hard",
          "id": 301,
          "title": "Remove Invalid Parentheses"
        }
      ],
      "submissions": 25.1,
      "testSuite": [
        {
          "input": ["(()"],
          "output": 2
        },
        {
          "input": [")()())"],
          "output": 4
        },
        {
          "input": [""],
          "output": 0
        }
      ],
      "title": "Longest Valid Parentheses",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Dynamic Programming"
        }
      ]
    },
    {
      "acceptanceRate": 35.9,
      "accepted": 30.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "SearchRotatedArrayMaster"
      },
      "body": "There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2]. Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "SearchRotatedArrayExpert"
      },
      "editorialBody": "The problem can be solved using binary search. Divide the array into two parts at the pivot point and perform binary search in the appropriate part based on the target value.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 33,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 81,
          "title": "Search in Rotated Sorted Array II"
        },
        {
          "difficulty": "Medium",
          "id": 153,
          "title": "Find Minimum in Rotated Sorted Array"
        }
      ],
      "submissions": 26.4,
      "testSuite": [
        {
          "input": [[4, 5, 6, 7, 0, 1, 2], 0],
          "output": 4
        },
        {
          "input": [[4, 5, 6, 7, 0, 1, 2], 3],
          "output": -1
        },
        {
          "input": [[1], 0],
          "output": -1
        }
      ],
      "title": "Search in Rotated Sorted Array",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Binary Search"
        }
      ]
    },
    {
      "acceptanceRate": 37.8,
      "accepted": 33.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "FindFirstLastPosMaster"
      },
      "body": "Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value. If the target is not found in the array, return [-1, -1]. You must write an algorithm with O(log n) runtime complexity.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "FindFirstLastPosExpert"
      },
      "editorialBody": "The problem can be solved using binary search. Perform two binary searches, one for finding the leftmost occurrence of the target and another for finding the rightmost occurrence of the target.",
      "editorialRating": 4.4,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 34,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 278,
          "title": "First Bad Version"
        },
        {
          "difficulty": "Medium",
          "id": 35,
          "title": "Search Insert Position"
        }
      ],
      "submissions": 27.2,
      "testSuite": [
        {
          "input": [[5, 7, 7, 8, 8, 10], 8],
          "output": [3, 4]
        },
        {
          "input": [[5, 7, 7, 8, 8, 10], 6],
          "output": [-1, -1]
        },
        {
          "input": [[], 0],
          "output": [-1, -1]
        }
      ],
      "title": "Find First and Last Position of Element in Sorted Array",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Binary Search"
        }
      ]
    },
    {
      "acceptanceRate": 42.7,
      "accepted": 36.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "SearchInsertPosMaster"
      },
      "body": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "SearchInsertPosExpert"
      },
      "editorialBody": "The problem can be solved using binary search. Perform binary search to find the target or the position where the target should be inserted.",
      "editorialRating": 4.2,
      "editorialVotes": {
        "1": 5,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 35,
      "similar": [
        {
          "difficulty": "Easy",
          "id": 34,
          "title": "Find First and Last Position of Element in Sorted Array"
        },
        {
          "difficulty": "Medium",
          "id": 74,
          "title": "Search a 2D Matrix"
        }
      ],
      "submissions": 28.6,
      "testSuite": [
        {
          "input": [[1, 3, 5, 6], 5],
          "output": 2
        },
        {
          "input": [[1, 3, 5, 6], 2],
          "output": 1
        },
        {
          "input": [[1, 3, 5, 6], 7],
          "output": 4
        }
      ],
      "title": "Search Insert Position",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Binary Search"
        }
      ]
    },
    {
      "acceptanceRate": 45.6,
      "accepted": 40.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "ValidSudokuMaster"
      },
      "body": "Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules: Each row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "ValidSudokuExpert"
      },
      "editorialBody": "The problem can be solved by checking each row, column, and sub-box separately for validity. Use hash sets to keep track of seen digits.",
      "editorialRating": 4.3,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 36,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 37,
          "title": "Sudoku Solver"
        }
      ],
      "submissions": 29.4,
      "testSuite": [
        {
          "input": [
            ["5", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"]
          ],
          "output": true
        },
        {
          "input": [
            ["8", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"]
          ],
          "output": false
        }
      ],
      "title": "Valid Sudoku",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Hash Table"
        }
      ]
    },
    {
      "acceptanceRate": 32.8,
      "accepted": 28.9,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "SudokuSolverMaster"
      },
      "body": "Write a program to solve a Sudoku puzzle by filling the empty cells. A sudoku solution must satisfy all of the following rules: Each of the digits 1-9 must occur exactly once in each row. Each of the digits 1-9 must occur exactly once in each column. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "SudokuSolverExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Try all possible numbers for an empty cell, and backtrack if the sudoku becomes invalid.",
      "editorialRating": 4.8,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 37,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 36,
          "title": "Valid Sudoku"
        }
      ],
      "submissions": 26.1,
      "testSuite": [
        {
          "input": [
            ["5", "3", ".", ".", "7", ".", ".", ".", "."],
            ["6", ".", ".", "1", "9", "5", ".", ".", "."],
            [".", "9", "8", ".", ".", ".", ".", "6", "."],
            ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
            ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
            ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
            [".", "6", ".", ".", ".", ".", "2", "8", "."],
            [".", ".", ".", "4", "1", "9", ".", ".", "5"],
            [".", ".", ".", ".", "8", ".", ".", "7", "9"]
          ],
          "output": [
            ["5", "3", "4", "6", "7", "8", "9", "1", "2"],
            ["6", "7", "2", "1", "9", "5", "3", "4", "8"],
            ["1", "9", "8", "3", "4", "2", "5", "6", "7"],
            ["8", "5", "9", "7", "6", "1", "4", "2", "3"],
            ["4", "2", "6", "8", "5", "3", "7", "9", "1"],
            ["7", "1", "3", "9", "2", "4", "8", "5", "6"],
            ["9", "6", "1", "5", "3", "7", "2", "8", "4"],
            ["2", "8", "7", "4", "1", "9", "6", "3", "5"],
            ["3", "4", "5", "2", "8", "6", "1", "7", "9"]
          ]
        }
      ],
      "title": "Sudoku Solver",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 42.7,
      "accepted": 36.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "CountSayMaster"
      },
      "body": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula: countAndSay(1) = '1', countAndSay(n) is the way you would 'say' the digit string from countAndSay(n-1), which is then converted into a different digit string.",
      "constraints": [],
      "difficulty": "Easy",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "CountSayExpert"
      },
      "editorialBody": "The problem can be solved iteratively. Iterate through the sequence, count the consecutive digits, and append the counts and digits to form the next sequence.",
      "editorialRating": 4.2,
      "editorialVotes": {
        "1": 5,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 38,
      "similar": [],
      "submissions": 28.6,
      "testSuite": [
        {
          "input": [1],
          "output": "1"
        },
        {
          "input": [4],
          "output": "1211"
        },
        {
          "input": [5],
          "output": "111221"
        }
      ],
      "title": "Count and Say",
      "topics": [
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 50.2,
      "accepted": 44.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "CombinationSumMaster"
      },
      "body": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order. The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "CombinationSumExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Explore all possible combinations by recursively trying each candidate and updating the target.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 39,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 40,
          "title": "Combination Sum II"
        },
        {
          "difficulty": "Medium",
          "id": 216,
          "title": "Combination Sum III"
        }
      ],
      "submissions": 30.2,
      "testSuite": [
        {
          "input": [[2, 3, 6, 7], 7],
          "output": [[2, 2, 3], [7]]
        },
        {
          "input": [[2, 3, 5], 8],
          "output": [
            [2, 2, 2, 2],
            [2, 3, 3],
            [3, 5]
          ]
        },
        {
          "input": [[2], 1],
          "output": []
        }
      ],
      "title": "Combination Sum",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 48.9,
      "accepted": 42.7,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "CombinationSumIIMaster"
      },
      "body": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination. Note: The solution set must not contain duplicate combinations.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "CombinationSumIIExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Sort the candidates array to avoid duplicate combinations, then explore all possible combinations by recursively trying each candidate and updating the target.",
      "editorialRating": 4.4,
      "editorialVotes": {
        "1": 7,
        "2": 3
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 40,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 39,
          "title": "Combination Sum"
        }
      ],
      "submissions": 32.6,
      "testSuite": [
        {
          "input": [[10, 1, 2, 7, 6, 1, 5], 8],
          "output": [
            [1, 1, 6],
            [1, 2, 5],
            [1, 7],
            [2, 6]
          ]
        },
        {
          "input": [[2, 5, 2, 1, 2], 5],
          "output": [[1, 2, 2], [5]]
        }
      ],
      "title": "Combination Sum II",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 35.6,
      "accepted": 30.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "FirstMissingPositiveMaster"
      },
      "body": "Given an unsorted integer array nums, find the smallest missing positive integer. You must implement an algorithm that runs in O(n) time and uses constant extra space.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "FirstMissingPositiveExpert"
      },
      "editorialBody": "The problem can be solved using swapping in-place. Iterate through the array and swap each positive integer to its correct position in the array. Then, iterate through the array again to find the first missing positive integer.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 8,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 41,
      "similar": [],
      "submissions": 27.8,
      "testSuite": [
        {
          "input": [[1, 2, 0]],
          "output": 3
        },
        {
          "input": [[3, 4, -1, 1]],
          "output": 2
        },
        {
          "input": [[7, 8, 9, 11, 12]],
          "output": 1
        }
      ],
      "title": "First Missing Positive",
      "topics": [
        {
          "name": "Array"
        }
      ]
    },
    {
      "acceptanceRate": 48.9,
      "accepted": 42.7,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "TrappingRainWaterMaster"
      },
      "body": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "TrappingRainWaterExpert"
      },
      "editorialBody": "The problem can be solved using two-pointer technique. Iterate through the elevation map with two pointers and calculate the trapped water at each position.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 42,
      "similar": [],
      "submissions": 39.2,
      "testSuite": [
        {
          "input": [[0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]],
          "output": 6
        },
        {
          "input": [[4, 2, 0, 3, 2, 5]],
          "output": 9
        },
        {
          "input": [[1, 2, 3, 4, 5]],
          "output": 0
        }
      ],
      "title": "Trapping Rain Water",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Two Pointers"
        },
        {
          "name": "Stack"
        }
      ]
    },
    {
      "acceptanceRate": 35.6,
      "accepted": 30.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "MultiplyStringsMaster"
      },
      "body": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string. You must not use any built-in BigInteger library or convert the inputs to integer directly.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "MultiplyStringsExpert"
      },
      "editorialBody": "The problem can be solved using the grade-school algorithm for multiplication. Perform multiplication digit by digit and keep track of the carry.",
      "editorialRating": 4.3,
      "editorialVotes": {
        "1": 6,
        "2": 4
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 43,
      "similar": [],
      "submissions": 27.8,
      "testSuite": [
        {
          "input": ["2", "3"],
          "output": "6"
        },
        {
          "input": ["123", "456"],
          "output": "56088"
        },
        {
          "input": ["9", "99"],
          "output": "891"
        }
      ],
      "title": "Multiply Strings",
      "topics": [
        {
          "name": "Math"
        },
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 25.5,
      "accepted": 20.8,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "WildcardMatchingMaster"
      },
      "body": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'. '?' Matches any single character. '*' Matches any sequence of characters (including the empty sequence).",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "WildcardMatchingExpert"
      },
      "editorialBody": "The problem can be solved using dynamic programming. Maintain a two-dimensional DP array to store whether the substrings match up to a certain point.",
      "editorialRating": 4.8,
      "editorialVotes": {
        "1": 10
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 44,
      "similar": [
        {
          "difficulty": "Hard",
          "id": 10,
          "title": "Regular Expression Matching"
        }
      ],
      "submissions": 23.4,
      "testSuite": [
        {
          "input": ["aa", "a"],
          "output": false
        },
        {
          "input": ["aa", "*"],
          "output": true
        },
        {
          "input": ["cb", "?a"],
          "output": false
        }
      ],
      "title": "Wildcard Matching",
      "topics": [
        {
          "name": "String"
        },
        {
          "name": "Dynamic Programming"
        },
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 32.9,
      "accepted": 28.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "JumpGameIIMaster"
      },
      "body": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps.",
      "constraints": [],
      "difficulty": "Hard",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "JumpGameIIExpert"
      },
      "editorialBody": "The problem can be solved using greedy approach. Iterate through the array and maintain the maximum reachable position at each step.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 45,
      "similar": [],
      "submissions": 31.2,
      "testSuite": [
        {
          "input": [[2, 3, 1, 1, 4]],
          "output": 2
        },
        {
          "input": [[2, 3, 0, 1, 4]],
          "output": 2
        },
        {
          "input": [[1]],
          "output": 0
        }
      ],
      "title": "Jump Game II",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Greedy"
        }
      ]
    },
    {
      "acceptanceRate": 60.1,
      "accepted": 53.4,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "PermutationsMaster"
      },
      "body": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PermutationsExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Iterate through the array and recursively generate permutations by swapping elements.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 8,
        "2": 2
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 46,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 47,
          "title": "Permutations II"
        }
      ],
      "submissions": 42.9,
      "testSuite": [
        {
          "input": [[1, 2, 3]],
          "output": [
            [1, 2, 3],
            [1, 3, 2],
            [2, 1, 3],
            [2, 3, 1],
            [3, 1, 2],
            [3, 2, 1]
          ]
        },
        {
          "input": [[0, 1]],
          "output": [
            [0, 1],
            [1, 0]
          ]
        },
        {
          "input": [[1]],
          "output": [[1]]
        }
      ],
      "title": "Permutations",
      "topics": [
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 46.7,
      "accepted": 40.5,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "PermutationsIIMaster"
      },
      "body": "Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PermutationsIIExpert"
      },
      "editorialBody": "The problem can be solved using backtracking. Sort the array to handle duplicates, then iterate through and recursively generate permutations.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 47,
      "similar": [
        {
          "difficulty": "Medium",
          "id": 46,
          "title": "Permutations"
        }
      ],
      "submissions": 37.2,
      "testSuite": [
        {
          "input": [[1, 1, 2]],
          "output": [
            [1, 1, 2],
            [1, 2, 1],
            [2, 1, 1]
          ]
        },
        {
          "input": [[1, 2, 3]],
          "output": [
            [1, 2, 3],
            [1, 3, 2],
            [2, 1, 3],
            [2, 3, 1],
            [3, 1, 2],
            [3, 2, 1]
          ]
        },
        {
          "input": [[1, 2, 1]],
          "output": [
            [1, 1, 2],
            [1, 2, 1],
            [2, 1, 1]
          ]
        }
      ],
      "title": "Permutations II",
      "topics": [
        {
          "name": "Backtracking"
        }
      ]
    },
    {
      "acceptanceRate": 56.4,
      "accepted": 50.2,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "RotateImageMaster"
      },
      "body": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "RotateImageExpert"
      },
      "editorialBody": "The problem can be solved by taking the transpose of the matrix and then reversing each row.",
      "editorialRating": 4.6,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 48,
      "similar": [],
      "submissions": 44.8,
      "testSuite": [
        {
          "input": [
            [
              [1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]
            ]
          ],
          "output": [
            [7, 4, 1],
            [8, 5, 2],
            [9, 6, 3]
          ]
        },
        {
          "input": [
            [
              [5, 1, 9, 11],
              [2, 4, 8, 10],
              [13, 3, 6, 7],
              [15, 14, 12, 16]
            ]
          ],
          "output": [
            [15, 13, 2, 5],
            [14, 3, 4, 1],
            [12, 6, 8, 9],
            [16, 7, 10, 11]
          ]
        },
        {
          "input": [[[1]]],
          "output": [[1]]
        }
      ],
      "title": "Rotate Image",
      "topics": [
        {
          "name": "Array"
        },
        {
          "name": "Matrix"
        }
      ]
    },
    {
      "acceptanceRate": 59.8,
      "accepted": 52.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "GroupAnagramsMaster"
      },
      "body": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "GroupAnagramsExpert"
      },
      "editorialBody": "The problem can be solved by sorting each string and using it as a key in a hashmap to group anagrams together.",
      "editorialRating": 4.7,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 49,
      "similar": [],
      "submissions": 47.6,
      "testSuite": [
        {
          "input": [["eat", "tea", "tan", "ate", "nat", "bat"]],
          "output": [["bat"], ["nat", "tan"], ["ate", "eat", "tea"]]
        },
        {
          "input": [[""]],
          "output": [[""]]
        },
        {
          "input": [["a"]],
          "output": [["a"]]
        }
      ],
      "title": "Group Anagrams",
      "topics": [
        {
          "name": "Hash Table"
        },
        {
          "name": "String"
        }
      ]
    },
    {
      "acceptanceRate": 31.8,
      "accepted": 27.6,
      "author": {
        "urlAvatar": "https://avatars.leetcode.com/u/98765",
        "username": "PowMaster"
      },
      "body": "Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).",
      "constraints": [],
      "difficulty": "Medium",
      "editorialAuthor": {
        "urlAvatar": "https://avatars.leetcode.com/u/54321",
        "username": "PowExpert"
      },
      "editorialBody": "The problem can be solved using recursion and divide-and-conquer approach. Keep dividing the problem into subproblems until n becomes 0.",
      "editorialRating": 4.5,
      "editorialVotes": {
        "1": 9,
        "2": 1
      },
      "frequency": "High",
      "hints": [],
      "isPublished": true,
      "isSubmitted": true,
      "numLC": 50,
      "similar": [],
      "submissions": 38.2,
      "testSuite": [
        {
          "input": [2, 10],
          "output": 1024
        },
        {
          "input": [2.1, 3],
          "output": 9.261
        },
        {
          "input": [2, -2],
          "output": 0.25
        }
      ],
      "title": "Pow(x, n)",
      "topics": [
        {
          "name": "Math"
        },
        {
          "name": "Binary Search"
        }
      ]
    }
  ],
  "status": "ok",
  "totalResults": 37
}
